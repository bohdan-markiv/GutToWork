openapi: 3.0.0
info:
  title: GutToWorkCDK
  version: 1.0.0
x-amazon-apigateway-request-validators:
  all:
    validateRequestBody: true
    validateRequestParameters: true
  body-only:
    validateRequestBody: true
    validateRequestParameters: false
x-amazon-apigateway-request-validator: all
# Global CORS configuration
x-amazon-apigateway-cors:
  allowOrigins:
    - "*"
  allowHeaders:
    - Content-Type
    - X-Amz-Date
    - Authorization
    - X-Api-Key
    - X-Amz-Security-Token
  allowMethods:
    - GET
    - POST
    - PUT
    - DELETE
    - OPTIONS
paths:
  /ingredients:
    get:
      tags:
        - Ingredients
      summary: List all ingredients
      description: List ingredients
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Ingredients"
        "405":
          description: Invalid input
        "404":
          description: No ingredients found
      x-amazon-apigateway-integration:
        type: aws_proxy
        httpMethod: POST
        uri: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:ingredients-get/invocations
    post:
      x-amazon-apigateway-request-validator: body-only
      tags:
        - Ingredients
      summary: Register a new ingredient
      description: Register a new ingredient after checking it doesn't already exist in the table
      requestBody:
        description: Create a new ingredient
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Ingredient"
        required: false
      responses:
        "200":
          description: Successful operation
        "405":
          description: Invalid input
      x-amazon-apigateway-integration:
        type: aws_proxy
        httpMethod: POST
        uri: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:ingredients-post/invocations
    options:
      summary: CORS support
      description: Enable CORS by returning the correct headers
      responses:
        "200":
          description: Default response for CORS method
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: string
            Access-Control-Allow-Methods:
              schema:
                type: string
            Access-Control-Allow-Headers:
              schema:
                type: string
      x-amazon-apigateway-integration:
        type: mock
        requestTemplates:
          application/json: |
            {
              "statusCode": 200
            }
        responses:
          default:
            statusCode: 200
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'GET,POST,PUT,DELETE,OPTIONS'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Origin: "'*'"

  /ingredients/{ingredient_id}:
    get:
      tags:
        - Ingredients
      summary: List a single ingredient
      description: Get details of an ingredient
      parameters:
        - name: ingredient_id
          in: path
          description: ingredient_id of the ingredient to return
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Ingredient"
        "405":
          description: Invalid input
      x-amazon-apigateway-integration:
        type: aws_proxy
        httpMethod: POST
        uri: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:ingredient-id-get/invocations
    put:
      x-amazon-apigateway-request-validator: body-only
      tags:
        - Ingredients
      summary: Update an ingredient
      description: Update an ingredient
      requestBody:
        description: Update an ingredient
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Ingredient"
        required: true
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Ingredient"
        "405":
          description: Invalid input
      x-amazon-apigateway-integration:
        type: aws_proxy
        httpMethod: POST
        uri: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:ingredient-id-put/invocations
    delete:
      tags:
        - Ingredients
      summary: Delete an ingredient
      description: Delete an ingredient
      parameters:
        - name: ingredient_id
          in: path
          description: ingredientID of the ingredient to delete
          required: true
          schema:
            type: integer
            format: int64
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Ingredient"
        "405":
          description: Invalid input
      x-amazon-apigateway-integration:
        type: aws_proxy
        httpMethod: POST
        uri: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:ingredient-id-delete/invocations
    options:
      summary: CORS support
      description: Enable CORS by returning the correct headers
      responses:
        "200":
          description: Default response for CORS method
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: string
            Access-Control-Allow-Methods:
              schema:
                type: string
            Access-Control-Allow-Headers:
              schema:
                type: string
      x-amazon-apigateway-integration:
        type: mock
        requestTemplates:
          application/json: |
            {
              "statusCode": 200
            }
        responses:
          default:
            statusCode: 200
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'GET,POST,PUT,DELETE,OPTIONS'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
  /food_records:
    get:
      tags:
        - Food Records
      summary: List all the food records
      description: List all the food records
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FoodRecords"
        "405":
          description: Invalid input
        "404":
          description: No food records found
      x-amazon-apigateway-integration:
        type: aws_proxy
        httpMethod: POST
        uri: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:food-records-get/invocations
    post:
      x-amazon-apigateway-request-validator: body-only
      tags:
        - Food Records
      summary: Log a new food record
      description: Post a new food record information
      requestBody:
        description: Food record body
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/FoodRecord"
        required: false
      responses:
        "200":
          description: Successful operation
        "405":
          description: Invalid input
      x-amazon-apigateway-integration:
        type: aws_proxy
        httpMethod: POST
        uri: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:food-record-post/invocations
    options:
      summary: CORS support
      description: Enable CORS by returning the correct headers
      responses:
        "200":
          description: Default response for CORS method
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: string
            Access-Control-Allow-Methods:
              schema:
                type: string
            Access-Control-Allow-Headers:
              schema:
                type: string
      x-amazon-apigateway-integration:
        type: mock
        requestTemplates:
          application/json: |
            {
              "statusCode": 200
            }
        responses:
          default:
            statusCode: 200
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'GET,POST,PUT,DELETE,OPTIONS'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
  /food_records/{food_record_id}:
    get:
      tags:
        - Food Records
      summary: List a single food record
      description: Get details of a food record
      parameters:
        - name: food_record_id
          in: path
          description: food_record_id of the record to return
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FoodRecord"
        "405":
          description: Invalid input
      x-amazon-apigateway-integration:
        type: aws_proxy
        httpMethod: POST
        uri: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:food-record-id-get/invocations
    put:
      x-amazon-apigateway-request-validator: body-only
      tags:
        - Food Records
      summary: Update a food record
      description: Update a food record
      parameters:
        - name: food_record_id
          in: path
          description: food_record_id of the record to change
          required: true
          schema:
            type: string
      requestBody:
        description: Update a food record
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/FoodRecord"
        required: true
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FoodRecord"
        "405":
          description: Invalid input
      x-amazon-apigateway-integration:
        type: aws_proxy
        httpMethod: POST
        uri: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:food-record-id-put/invocations
    delete:
      tags:
        - Food Records
      summary: Delete a food record
      description: Delete a food record
      parameters:
        - name: food_record_id
          in: path
          description: food_record_id of the record to delete
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FoodRecord"
        "405":
          description: Invalid input
      x-amazon-apigateway-integration:
        type: aws_proxy
        httpMethod: POST
        uri: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:food-record-id-delete/invocations
    options:
      summary: CORS support
      description: Enable CORS by returning the correct headers
      responses:
        "200":
          description: Default response for CORS method
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: string
            Access-Control-Allow-Methods:
              schema:
                type: string
            Access-Control-Allow-Headers:
              schema:
                type: string
      x-amazon-apigateway-integration:
        type: mock
        requestTemplates:
          application/json: |
            {
              "statusCode": 200
            }
        responses:
          default:
            statusCode: 200
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'GET,POST,PUT,DELETE,OPTIONS'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
components:
  schemas:
    Ingredient:
      type: object
      required:
        - ingredient_name
        - default_portion_size
      properties:
        ingredient_name:
          type: string
          example: potato
        default_portion_size:
          type: string
          enum: [big, normal, small]
          example: small
        default_cooking_type:
          type: string
          enum: [raw, boiled, deep fried, pan fried, baked, infused]
          example: boiled
    Ingredients:
      type: array
      items:
        allOf:
          - $ref: "#/components/schemas/Ingredient"
    FoodRecord:
      type: object
      required:
        - date
        - ingredient_id
        - ingredient_name
        - portion_size
        - cooking_type
        - time_of_day
      properties:
          date:
            type: string
            format: date
          ingredient_id:
            type: string
            example: sjdvnuisfdvsdinv
          ingredient_name:
            type: string
            example: potato
          portion_size:
            type: string
            enum: [big, normal, small]
            example: small
          cooking_type:
            type: string
            enum: [raw, boiled, deep fried, pan fried, baked, infused]
            example: boiled
          time_of_day:
            type: string
            enum: [morning, afternoon, noon, night]
            example: morning

    FoodRecords:
      type: array
      items:
        allOf:
        - $ref: "#/components/schemas/FoodRecord"